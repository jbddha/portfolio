This document details the process of building a functional Active Directory and Splunk environment for security monitoring and analysis, as visualized in the accompanying network diagram (ActiveDirectoryLab.io). This diagram outlines the project's scope and the flow of telemetry data across our virtual network.

The initial step involved creating four virtual machines using VirtualBox. We downloaded .iso files for Windows 10, Windows Server 2022, and Ubuntu 22.04, and a pre-built Kali Linux machine. These VMs formed the foundation of our test environment.

To ensure seamless communication for the subsequent Splunk server and Active Directory setup, we configured a NAT Network in VirtualBox, allowing all virtual machines to communicate with each other and the internet. Setting up the Splunk server required disabling DHCP, configuring a static IP address (192.168.56.101), a default router, and specifying the DNS server by editing the .yaml configuration file on the Ubuntu VM. We leveraged a VirtualBox shared folder to transfer the Splunk installer and necessary dependencies. After mounting the shared folder to /home/user/share, we installed Splunk, configured it to start on boot, and resolved a host access issue by creating a port forwarding rule in VirtualBox. The Splunk instance was then accessible via its dashboard.

Next, we prepared the Windows 10 and Active Directory Server VMs to send telemetry to Splunk. This involved ensuring proper network configuration with static IP addresses (Windows 10: 192.168.56.102, AD Server: 192.168.56.103), confirmed DNS servers, and default routers. On the Windows 10 machine, we downloaded and installed the Splunk Universal Forwarder and Sysmon, along with a Sysmon configuration file. The forwarder was configured via inputs.conf to send data to a newly created Splunk index named "endpoint." Initial checks confirmed successful data ingestion, with over 6,000 events populating the "endpoint" index from the Windows 10 forwarder. A similar process was followed for the Active Directory Server, ensuring it was configured as a deployment server. The Splunk dashboard then showed telemetry from both Windows 10 and the Active Directory Server.

The core of the project involved installing and configuring Active Directory Domain Services on the designated Windows Server 2022 VM. Using the 'Add Roles or Features' wizard, we installed AD DS and subsequently promoted the server to a domain controller, naming our domain "THESHIRE.LOCAL." We then created organizational units (OUs) and added two example groups, "Hobbits" and "Wizards," along with user accounts "Frodo Baggins (fbaggins)" and "Gandalf TheGrey (gthegrey)," setting easily guessable passwords for demonstration purposes.

To integrate the Windows 10 machine into the newly created domain, we modified its computer name properties, specifying "THESHIRE.LOCAL" as the domain. Initially, the agent couldn't resolve the domain, which was resolved by manually configuring the network adapter's DNS settings to point to the Active Directory server's IP address. After verifying the DNS configuration with ipconfig, we successfully joined the "THESHIRE.LOCAL" domain using the administrator credentials for the domain controller. Upon restart, the Windows 10 machine allowed domain logins, and we successfully logged in as the "fbaggins" user.

The final verification stage involved simulating a brute-force attack. On the updated Kali Linux VM, we installed the "crowbar" tool. On the Windows 10 target machine, Remote Desktop Protocol (RDP) was enabled for the domain users. Executing a brute-force attack with "crowbar" and a simple wordlist successfully yielded the credentials for the "fbaggins" user.

Analyzing the "endpoint" index in the Splunk dashboard for the last 24 hours revealed numerous events. Further investigation identified 40 instances of event code 4625 (failed logon attempts), indicating the brute-force activity. Additionally, event code 4624 (successful logon) confirmed that the attacker successfully gained access. This demonstrated Splunk's capability to detect suspicious activity.

To further generate telemetry for analysis, we downloaded and installed Atomic Red Team on the Windows 10 machine, creating a Windows Defender exclusion for the C:/ drive to allow the download. Using PowerShell with administrative privileges, we installed Atomic Red Team from GitHub. We then executed a test case simulating the creation of a new local administrator user (mapped to MITRE ATT&CK technique T1136). Examining the Splunk logs revealed numerous event code 4672 events, indicating the assignment of special privileges to a new logon, thus validating Atomic Red Team's effectiveness in generating detectable security events.

This project successfully demonstrated the integration of Active Directory and Splunk for threat detection and analysis, laying the groundwork for developing more robust security monitoring capabilities.
